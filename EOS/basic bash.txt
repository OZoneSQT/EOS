Show content of a file: 	cat fileName
Show filetype:				file fileName

    r: Read permissions. The file can be opened, and its content viewed.
    w: Write permissions. The file can be edited, modified, and deleted.
    x: Execute permissions. If the file is a script or a program, it can be run (executed).

	a = all
	g = group
	o = others
	u = user
	
	SetUID bit			This bit is present for files which have executable permissions. The setuid bit 
						simply indicates that when running the executable, it will set its permissions 
						to that of the user who created it (owner), instead of setting it to the user who 
						launched it. Similarly, there is a setgid bit which does the same for the gid.

						Add SetUID:		chmod u+s fileName 
						Remove SetUID:	chmod u-s fileName 
	
	SetGID bit			The setgid affects both files as well as directories. When used on a file, it 
						executes with the privileges of the group of the user who owns it instead of 
						executing with those of the group of the user who executed it.
					
						When the bit is set for a directory, the set of files in that directory will 
						have the same group as the group of the parent directory, and not that of the 
						user who created those files. This is used for file sharing since they can be 
						now modified by all the users who are part of the group of the parent directory.
	
						Add SetGID:		chmod g+s fileName 
						Remove SetGID:	chmod g-s fileName 
	
	Sticky Bits			The sticky bit was initially introduced to ‘stick’ an executable program’s text 
	(writeprotection)	segment in the swap space even after the program has completed execution, to speed 
						up the subsequent runs of the same program. However, these days the sticky bit 
						means something entirely different.

						When a directory has the sticky bit set, its files can be deleted or renamed only 
						by the file owner, directory owner and the root user. The command below shows how 
						the sticky bit can be set.
	
						Add Sticky Bits:					chmod +t fileName
						Remove Sticky Bits: 				chmod -t fileName
						Add Sticky Bits to current folder:	chmod +t .
						Add Sticky Bits to folder:			chmod +t ./folderName
	
	List permissions:									ls -l
	Give Read permissions to all:						chmod a+r fileName
	Give Write permissions to all:						chmod a+w fileName
	Give Read and Write permissions to all:				chmod a+rw fileName
	Make file executable to all:						chmod a+rw fileName
	Give Read, Write and executa permissions to all:	chmod a+rwx filename
	
	Remove Write permissions to all:					chmod a-w fileName
	Remove Write permissions to user:					chmod u-w fileName
	Remove Write permissions to group:					chmod g-w fileName
	Remove Write permissions to others:					chmod o-w fileName
	Remove Write permissions to group and others:		chmod go-w fileName

    0: (000) No permission.
    1: (001) Execute permission.
    2: (010) Write permission.
    3: (011) Write and execute permissions.
    4: (100) Read permission.
    5: (101) Read and execute permissions.
    6: (110) Read and write permissions.
    7: (111) Read, write, and execute permissions.

	permission to:  user(u)   group(g)   other(o)     
					/¯¯¯\      /¯¯¯\      /¯¯¯\
	octal:            6          6          6
	binary:         1 1 0      1 1 0      1 1 0
	what to permit: r w x      r w x      r w x

	binary         - 1: enabled, 0: disabled

	what to permit - r: read, w: write, x: execute

	Numerical Shorthand:		chmod 664 fileName		user = Read and write permissions
														group = Read and write permissions
														other = Read permission

	Numerical Shorthand:		chmod 1664 fileName		user = Read and write permissions
	1 = sticky bit										group = Read and write permissions
	2 = setgid											other = Read permission
	4 = setuid											sticky bit is set

	Numerical Shorthand:		chmod 3664 fileName		user = Read and write permissions
	1 = sticky bit										group = Read and write permissions
	2 = setgid											other = Read permission
	4 = setuid											sticky and setgid bit is set (1+2)

	rename file: 			mv oldName newName
	delete file : 			rm fileName
	delete folder:			rmdir folderName
	Copy file:				cp fileName destination
	Copy folder:			cp -r ./SourceFolder ./DestFolder
	Move file:				mv fileName ./Destination
	Move Folder:			mv ./oldFolder ./newFolder
	
	create a new file:		touch newfileName.txt
	create a new folder:	mkdir newFolderName
	
	
	tar [options] [archive-file] [file or directory to be archived]
	
	-c : Creates Archive 
	-x : Extract the archive 
	-f : creates archive with given filename 
	-t : displays or lists files in archived file 
	-u : archives and adds to an existing archive file 
	-v : Displays Verbose Information 
	-A : Concatenates the archive files 
	-z : zip, tells tar command that creates tar file using gzip 
	-j : filter archive tar file using tbzip 
	-W : Verify a archive file 
	-r : update or add file or directory in already existed .tar file 
	